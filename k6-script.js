// Auto-generated by the postman-to-k6 converter

import "./libs/shim/core.js";
import "./libs/shim/expect.js";
import "./libs/shim/urijs.js";
import { group } from "k6";

export let options = { maxRedirects: 4 };

const Request = Symbol.for("request");
postman[Symbol.for("initial")]({
  options,
  environment: {
    URL: "https://reqres.in"
  }
});

export default function() {
  group("reqres", function() {
    postman[Request]({
      name: "Get list user",
      id: "6b401722-acc2-46f3-968f-a196d4ba6b16",
      method: "GET",
      address: "{{URL}}/api/users",
      post(response) {
        //test
        pm.test("API should return response 200 OK", () => {
          pm.expect(pm.response.code).to.eql(200);
        });
        pm.test("API should return body page", () => {
          pm.expect(pm.response.text()).to.include("xyz");
        });
      }
    });

    postman[Request]({
      name: "Get list user with parameter",
      id: "282f2825-7c11-46d0-97c8-5fbe5c2624ff",
      method: "GET",
      address: "{{URL}}/api/users?page=2",
      post(response) {
        //test
        pm.test("Success get list user with Status code 200", () => {
          pm.expect(pm.response.code).to.eql(200);
        });
      }
    });

    postman[Request]({
      name: "Get list user with invalid parameter",
      id: "257cb29f-a3c8-4255-934d-7a67ec3e245e",
      method: "GET",
      address: "{{URL}}/api/users?pagezzzzzzzzzzzzzzzz=xx",
      post(response) {
        //test
        pm.test("Failed get list user with Status code 404", () => {
          pm.expect(pm.response.code).to.eql(404);
        });
      }
    });

    postman[Request]({
      name: "Get list user exceeds total pages",
      id: "7767ea1d-8370-4353-9562-0a83d1470438",
      method: "GET",
      address: "{{URL}}/api/users?page=3",
      post(response) {
        //test
        pm.test("Failed get list user with Status code 404", () => {
          pm.expect(pm.response.code).to.eql(404);
        });
      }
    });

    postman[Request]({
      name: "Get single user with user id 5",
      id: "1359c658-bbed-4208-9b96-07eeeb4e532e",
      method: "GET",
      address: "{{URL}}/api/users/2",
      post(response) {
        //test
        pm.test("Success get user with Status code 200", () => {
          pm.expect(pm.response.code).to.eql(200);
        });
      }
    });

    postman[Request]({
      name: "Get single user with invalid path",
      id: "78d8a5f7-c05e-4b6a-b5ff-9c9d7032b172",
      method: "GET",
      address: "{{URL}}/api/users/xxxx",
      post(response) {
        //test
        pm.test("Failed get user with Status code 404", () => {
          pm.expect(pm.response.code).to.eql(404);
        });
      }
    });

    postman[Request]({
      name: "Get unregistered user",
      id: "f8a9d23f-799e-43c9-aa50-8ba9295de933",
      method: "GET",
      address: "{{URL}}/api/users/50",
      post(response) {
        //test
        pm.test("Failed get user with Status code 404", () => {
          pm.expect(pm.response.code).to.eql(404);
        });
      }
    });

    postman[Request]({
      name: "Create new user",
      id: "7468e2fa-4ad3-4b54-8b8a-2687d22911df",
      method: "POST",
      address: "{{URL}}/api/users",
      data: '{\n    "name": "Wisnu",\n    "job": "QA Id"\n}',
      post(response) {
        //test
        pm.test("Success create new user with Status code 201", () => {
          pm.expect(pm.response.code).to.eql(201);
        });
      }
    });

    postman[Request]({
      name: "Create new user with invalid request",
      id: "a6d75e5a-a9ee-4912-bd5d-aa2ced9458df",
      method: "POST",
      address: "{{URL}}/api/users",
      data:
        '{\n    "nama saya adalah": "Wisnu",\n    "pekerjaan saya adalah": "QA Id"\n}',
      post(response) {
        //test
        pm.test("Failed create new user with Status code 404", () => {
          pm.expect(pm.response.code).to.eql(404);
        });
      }
    });

    postman[Request]({
      name: "Update user",
      id: "7d8c9a81-b236-44df-8547-24c1a8580d6d",
      method: "PUT",
      address: "{{URL}}/api/users/2",
      data: '{\n    "name": "wisnu munawar",\n    "job": "quality engineer"\n}',
      post(response) {
        //test
        pm.test("Success update user with Status code 200", () => {
          pm.expect(pm.response.code).to.eql(200);
        });
      }
    });

    postman[Request]({
      name: "Update unregistered user",
      id: "94f4d311-ae6f-4fd7-a56e-000501b9ec37",
      method: "PUT",
      address: "{{URL}}/api/users/50",
      data: '{\n    "name": "wisnu munawar",\n    "job": "quality engineer"\n}',
      post(response) {
        //test
        pm.test("Failed get user with Status code 404", () => {
          pm.expect(pm.response.code).to.eql(404);
        });
      }
    });

    postman[Request]({
      name: "Update user with invalid request",
      id: "79f42191-d8b0-4d33-99d3-39e41eaeab33",
      method: "PUT",
      address: "{{URL}}/api/users/2",
      data:
        '{\n    "nama saya": "wisnu munawar",\n    "pekerjaan saya": "quality engineer"\n}',
      post(response) {
        //test
        pm.test("Failed update user with Status code 400", () => {
          pm.expect(pm.response.code).to.eql(400);
        });
      }
    });

    postman[Request]({
      name: "Delete user",
      id: "637016d5-4969-4f20-ab8e-dfc16410511a",
      method: "DELETE",
      address: "{{URL}}/api/users/2",
      post(response) {
        //test
        pm.test("Success delete user with Status code 204", () => {
          pm.expect(pm.response.code).to.eql(204);
        });
      }
    });

    postman[Request]({
      name: "Delete unregistered user",
      id: "1522f2a2-ea8b-4439-a425-95221028aabd",
      method: "DELETE",
      address: "{{URL}}/api/users/50",
      post(response) {
        //test
        pm.test("Failed delete user with Status code 404", () => {
          pm.expect(pm.response.code).to.eql(404);
        });
      }
    });

    postman[Request]({
      name: "Get list user - 2",
      id: "cbe2abb6-b5ad-490d-a28c-21a97e7d8e00",
      method: "GET",
      address: "{{URL}}/api/users"
    });

    postman[Request]({
      name: "Create user",
      id: "be5b8095-523f-40df-bccb-d08e1b134e12",
      method: "POST",
      address: "{{URL}}/api/users",
      data: '{\n    "name": "Wisnu Munawar",\n    "job": "QA E"\n}'
    });

    postman[Request]({
      name: "Update user",
      id: "0fab56a1-ca41-4a7a-9d1a-7332e0077154",
      method: "PUT",
      address: "{{URL}}/api/users/2",
      data: '{\n    "name": "Wisnu Edit",\n    "job": "QA E E E"\n}'
    });

    postman[Request]({
      name: "Delete user",
      id: "bf74cfef-d3cd-43ef-9856-7d487b8c6f94",
      method: "DELETE",
      address: "{{URL}}/api/users/2"
    });

    postman[Request]({
      name: "Register user",
      id: "434b469b-1e11-43a2-b058-f03e5186e898",
      method: "POST",
      address: "{{URL}}/api/register",
      data: '{\n    "email": "eve.holt@reqres.in",\n    "password": "pistol"\n}'
    });

    postman[Request]({
      name: "Register user without json data",
      id: "be559d2f-4120-48a5-b212-c60168d70fd5",
      method: "POST",
      address: "{{URL}}/api/register",
      data: "{\n\n}"
    });
  });

  group("swapi", function() {
    postman[Request]({
      name: "get list people",
      id: "259871a7-7b3f-432c-b9f9-5c8a40595b5b",
      method: "GET",
      address: "{{URL}}/api/people"
    });

    postman[Request]({
      name: "get people",
      id: "8ade1c9c-d0b3-48b1-a42a-d0cc7e0d14f5",
      method: "GET",
      address: "{{URL}}/api/people/1"
    });

    postman[Request]({
      name: "Get starship",
      id: "f7d0cee0-e002-4529-b6c8-0f720f06fcf2",
      method: "GET",
      address: "{{URL}}/api/starships/12"
    });
  });

  group("newsapi", function() {
    postman[Request]({
      name: "get article about tesla",
      id: "1c1d1bdb-c4a8-49d3-b313-49c6b4baed79",
      method: "GET",
      address:
        "{{URL}}/v2/everything?q=tesla&apiKey=a31dca5bb10d44c7a284e8b38511bce4"
    });

    postman[Request]({
      name: "get article about apple",
      id: "891f89fd-ca02-4cd9-a4a9-cfd1398682cb",
      method: "GET",
      address:
        "{{URL}}/v2/everything?q=apple&apiKey=a31dca5bb10d44c7a284e8b38511bce4"
    });
  });
}
